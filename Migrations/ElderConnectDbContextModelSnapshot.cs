// <auto-generated />
using System;
using ElderConnectApi.Data;
using ElderConnectApi.Data.Common;
using ElderConnectApi.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElderConnectApi.Migrations
{
    [DbContext(typeof(ElderConnectDbContext))]
    partial class ElderConnectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "booking_status", new[] { "cancelled", "completed", "confirmed", "in_progress", "paid", "pending" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender", new[] { "female", "male" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "nurse_account_status", new[] { "active", "pending", "suspended" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_account_status", new[] { "active", "pending", "suspended" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressSnapshot")
                        .HasColumnType("jsonb")
                        .HasColumnName("address_snapshot");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("end_time");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_id");

                    b.Property<string>("NurseSnapshot")
                        .HasColumnType("jsonb")
                        .HasColumnName("nurse_snapshot");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<string>("PatientSnapshot")
                        .HasColumnType("jsonb")
                        .HasColumnName("patient_snapshot");

                    b.Property<BookingPayment>("Payment")
                        .HasColumnType("jsonb")
                        .HasColumnName("payment");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("reference_code");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamptz")
                        .HasColumnName("start_time");

                    b.Property<BookingStatus>("Status")
                        .HasColumnType("booking_status")
                        .HasColumnName("status");

                    b.Property<BookingTimeline>("Timeline")
                        .HasColumnType("jsonb")
                        .HasColumnName("timeline");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserSnapshot")
                        .HasColumnType("jsonb")
                        .HasColumnName("user_snapshot");

                    b.HasKey("BookingId")
                        .HasName("pk_bookings");

                    b.HasIndex(new[] { "AddressId" }, "ix_booking_address_id")
                        .HasDatabaseName("ix_bookings_address_id");

                    b.HasIndex(new[] { "NurseId" }, "ix_booking_nurse_id")
                        .HasDatabaseName("ix_bookings_nurse_id");

                    b.HasIndex(new[] { "PatientId" }, "ix_booking_patient_id")
                        .HasDatabaseName("ix_bookings_patient_id");

                    b.HasIndex(new[] { "ReferenceCode" }, "ix_booking_reference_code")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_reference_code");

                    b.HasIndex(new[] { "Status" }, "ix_booking_status")
                        .HasDatabaseName("ix_bookings_status");

                    b.HasIndex(new[] { "UserId" }, "ix_booking_user_id")
                        .HasDatabaseName("ix_bookings_user_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Nurse", b =>
                {
                    b.Property<Guid>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_id");

                    b.Property<NurseAccountStatus>("AccountStatus")
                        .HasColumnType("nurse_account_status")
                        .HasColumnName("account_status");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<Gender>("Gender")
                        .HasColumnType("gender")
                        .HasColumnName("gender");

                    b.Property<string>("GraduatedFrom")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("graduated_from");

                    b.Property<DateOnly?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_image_url");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("NurseId")
                        .HasName("pk_nurses");

                    b.HasIndex(new[] { "Email" }, "ix_nurse_email")
                        .IsUnique()
                        .HasDatabaseName("ix_nurses_email");

                    b.HasIndex(new[] { "PhoneNumber" }, "ix_nurse_phone_number")
                        .IsUnique()
                        .HasDatabaseName("ix_nurses_phone_number");

                    b.ToTable("nurses", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseAddress", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressLine")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("coordinates");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("NurseId")
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_id");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("province");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("AddressId")
                        .HasName("pk_nurse_addresses");

                    b.HasIndex(new[] { "NurseId" }, "ix_nurse_address_nurse_id")
                        .IsUnique()
                        .HasDatabaseName("ix_nurse_addresses_nurse_id");

                    b.ToTable("nurse_addresses", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseLeave", b =>
                {
                    b.Property<Guid>("NurseId")
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_id");

                    b.Property<DateOnly>("LeaveDate")
                        .HasColumnType("date")
                        .HasColumnName("leave_date");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("NurseId", "LeaveDate")
                        .HasName("pk_nurse_leaves");

                    b.HasIndex(new[] { "NurseId" }, "ix_nurse_leave_nurse_id")
                        .HasDatabaseName("ix_nurse_leaves_nurse_id");

                    b.ToTable("nurse_leaves", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseSchedule", b =>
                {
                    b.Property<Guid>("NurseId")
                        .HasColumnType("uuid")
                        .HasColumnName("nurse_id");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("NurseId", "DayOfWeek")
                        .HasName("pk_nurse_schedules");

                    b.HasIndex(new[] { "DayOfWeek" }, "ix_nurse_schedule_day_of_week")
                        .HasDatabaseName("ix_nurse_schedules_day_of_week");

                    b.HasIndex(new[] { "NurseId" }, "ix_nurse_schedule_nurse_id")
                        .HasDatabaseName("ix_nurse_schedules_nurse_id");

                    b.ToTable("nurse_schedules", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("patient_id");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<double>("HeightInCm")
                        .HasColumnType("double precision")
                        .HasColumnName("height_in_cm");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("medical_conditions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("double precision")
                        .HasColumnName("weight_in_kg");

                    b.HasKey("PatientId")
                        .HasName("pk_patients");

                    b.HasIndex(new[] { "UserId" }, "ix_patient_user_id")
                        .HasDatabaseName("ix_patients_user_id");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<UserAccountStatus>("AccountStatus")
                        .HasColumnType("user_account_status")
                        .HasColumnName("account_status");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset>("JoinDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("join_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("salt");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex(new[] { "Email" }, "ix_user_email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex(new[] { "PhoneNumber" }, "ix_user_phone_number")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressLine")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("coordinates");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("province");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamptz")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("AddressId")
                        .HasName("pk_addresses");

                    b.HasIndex(new[] { "UserId" }, "ix_address_user_id")
                        .HasDatabaseName("ix_addresses_user_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Booking", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.UserAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_addresses_address_id");

                    b.HasOne("ElderConnectApi.Data.Entities.Nurse", "Nurse")
                        .WithMany("Bookings")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_nurses_nurse_id");

                    b.HasOne("ElderConnectApi.Data.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_patients_patient_id");

                    b.HasOne("ElderConnectApi.Data.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_users_user_id");

                    b.Navigation("Address");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseAddress", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.Nurse", "Nurse")
                        .WithOne("Address")
                        .HasForeignKey("ElderConnectApi.Data.Entities.NurseAddress", "NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nurse_addresses_nurses_nurse_id");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseLeave", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.Nurse", "Nurse")
                        .WithMany("Leaves")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nurse_leaves_nurses_nurse_id");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.NurseSchedule", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.Nurse", "Nurse")
                        .WithMany("Schedules")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nurse_schedules_nurses_nurse_id");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Patient", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patients_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.UserAddress", b =>
                {
                    b.HasOne("ElderConnectApi.Data.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_addresses_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.Nurse", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");

                    b.Navigation("Leaves");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ElderConnectApi.Data.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Bookings");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
